{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","setMode","document","body","style","backgroundColor","showAlert","role","htmlFor","color","toggleMode","placeholder","TextForm","text","setText","useState","isItalic","setIsItalic","Fragment","heading","value","onChange","e","target","rows","disabled","length","upCase","newText","toUpperCase","lowCase","lowerCase","toLowerCase","clearText","toggleItalic","prev","copyText","copytext","getElementById","select","navigator","clipboard","writeText","clearExtra","split","join","filter","fontStyle","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setAlert","message","setTimeout","about","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.98aafe7b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                {props.about}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          <div className=\"form-check form-switch mx-2\">\r\n            <input onClick={()=>{if(props.mode===\"light\"){props.setMode(\"dark\");document.body.style.backgroundColor=\"#f55454c9\";props.showAlert(\"Red Dark mode has been enable\",\"success\");}else{props.setMode(\"light\");document.body.style.backgroundColor=\"white\";props.showAlert(\"Light mode has been enable\",\"success\");}}} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{color: props.mode==='light'?'black':'white'}}>Enable to Red Dark Mode </label>\r\n          </div>\r\n          <div className=\"form-check form-switch mx-2\">\r\n            <input onClick={()=>{if(props.mode===\"light\"){props.setMode(\"dark\");document.body.style.backgroundColor=\"#225f9b\";props.showAlert(\"Blue Dark mode has been enable\",\"success\");}else{props.setMode(\"light\");document.body.style.backgroundColor=\"white\";props.showAlert(\"Light mode has been enable\",\"success\");}}} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{color: props.mode==='light'?'black':'white'}}>Enable to Blue Dark Mode </label>\r\n          </div>\r\n          <div\r\n            className=\"form-check form-switch text-light\"\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\" style={{color: props.mode==='light'?'black':'white'}}\r\n            >\r\n              Enable to Dark Mode\r\n            </label>\r\n          </div>\r\n          <form className=\"d-flex mx-2\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\n// Navbar.defaultProps ={\r\n//     // title: 'set title here',\r\n//     about : 'About Us'\r\n// }\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const upCase = () => {\r\n    // console.log(\"text\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase ! \",\"success\");\r\n  };\r\n  const clearText = () => {\r\n    let clear = \"\";\r\n    setText(clear);\r\n    props.showAlert(\"Clear text ! \",\"success\");\r\n  };\r\n  const lowCase = () => {\r\n    let lowerCase = text.toLowerCase();\r\n    setText(lowerCase);\r\n    props.showAlert(\"Converted to lowercase ! \",\"success\");\r\n  };\r\n  const copyText = () => {\r\n    let copytext = document.getElementById(\"myBox\");\r\n    copytext.select();\r\n    navigator.clipboard.writeText(copytext.value);\r\n    props.showAlert(\"Copy to clipboard ! \",\"success\");\r\n  };\r\n  const onchangeText = (e) => {\r\n    // console.log(\"setText\");\r\n    setText(e.target.value);\r\n  };\r\n  const toggleItalic = () => {\r\n    setIsItalic((prev) => !prev);\r\n    props.showAlert(\"Converted to italic-font ! \",\"success\");\r\n  };\r\n  const clearExtra = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed ! \",\"success\");\r\n\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  const [isItalic, setIsItalic] = useState(false);\r\n  // text =\"new test\";//wronge way to change the state\r\n  // setText(\"new text\");//Correct way to change the state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#f8f9faa6\" : \"white\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n            }}\r\n            value={text}\r\n            onChange={onchangeText}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={upCase}>\r\n          Convert to UperCase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={lowCase}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={clearText}>\r\n          Clear Text\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={toggleItalic}>\r\n          {isItalic ? \"Remove Italic\" : \"Convert to Italic Font\"}\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" id=\"myBox\" onClick={copyText}>\r\n          Copy Text\r\n        </button>\r\n        <button disabled={text.length===0} className=\"btn btn-dark mx-2 my-2\" onClick={clearExtra}>\r\n          Extra Space Set\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"light\" ? \"black\" : \"white\" }}\r\n      >\r\n        <h1> Your text Summary</h1>\r\n        <p>\r\n          {text.split(\" \").filter((e)=>{return e.length !== 0}).length} words and {text.length} characters\r\n        </p>  {/* solve the problem space errer */}\r\n        {/* <p>\r\n          {text.trim() === \"\" \r\n            ? \"0 words and 0 characters\" \r\n            : `${text.split(\" \").length} words and ${text.length} characters`}\r\n        </p>  */}\r\n         {/* solve the debug */}\r\n\r\n        <p>{0.008 * text.split(\" \").filter((e)=>{return e.length !== 0}).length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p id =\"itelicdata\" style={{ fontStyle: isItalic ? \"italic\" : \"normal\" }}>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter somthing in the textbox above to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n          {props.alert && \r\n            <div\r\n              className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n              role=\"alert\"\r\n            >\r\n              <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            </div>\r\n          }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import { useState } from \"react\";\nimport \"./App.css\";\n// import About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React from 'react';\nimport Alert from './components/Alert'\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n// let name = \" Shailendra Kumar Pandey\"\nfunction App() {\n  const [mode,setMode] = useState(\"light\"); // Whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type)=>{\n    setAlert({\n      msg : message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },3000);\n  }\n  const toggleMode = ()=>{\n    if(mode===\"light\"){\n      setMode(\"dark\");\n      document.body.style.backgroundColor='gray';\n      showAlert(\"Dark mode has been enable\",\"success\");\n    }else{\n      setMode(\"light\");\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enable\",\"success\");\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode ={toggleMode} setMode={setMode} showAlert={showAlert}/>\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n      {/* <Switch>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter the text Analyze\"  mode={mode} />\n              {/* </Route>\n        </Switch> */}\n        {/* <About/> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}